
    @pytest.mark.run(order=$order)
    def $casename(self):
        test_case = $testcase
        log.info(Template("task_init 正在执行：$$name用例").substitute(name=test_case['casename']))

        test_case = var_add_random_str(test_case)
        test_case = datetime_translate(test_case)
        parse_case_vars(test_case, init_object)
        test_case = VarReplace(test_case, [init_object]).var_replace()

        api_info = {
            "url": test_case['url'],
            "method": test_case['method'],
            "params": test_case['params'],
            "header": test_case['header']
        }

        try:
            res = ApiHandler(api_info).api_request()
        except Exception as e:
            log.error(Template("task_init api request fail,error info: $$e").substitute(e=e))
            RS.append_row(file_name, [test_case['casename'], test_case['url'], test_case['method'],
                        test_case['params'], test_case['header'], "request error"], "fail")
            check.equal(1, 2, "task_init Exception returned on API request")
            return False

        if res.status_code != 200:
            log.error(Template("task_init api request fail, the response text is: $$content").substitute(content=res.text))
            RS.append_row(file_name, [test_case['casename'], test_case['url'], test_case['method'], test_case['params'],
                                      test_case['header'], res.text, res.status_code, res.elapsed.total_seconds()],
                          "fail")
            check.equal(1, 2, msg="task_init api response status_code not equal 200, fail")

        try:
            res_json = res.json()
            RS.append_row(file_name, [test_case['casename'], test_case['url'], test_case['method'], test_case['params'],
                                      test_case['header'], res.text, res.status_code, res.elapsed.total_seconds()],
                          "pass")
        except Exception as e:
            log.error(Template("task_init 响应内容格式化为json失败，错误信息: $$e").substitute(e=e))
            RS.append_row(file_name, [test_case['casename'], test_case['url'], test_case['method'], test_case['params'],
                                      test_case['header'], res.text, res.status_code, res.elapsed.total_seconds()],
                          "fail")
            return False

        if test_case.get('wait_time'):
            wait_time = float(test_case['wait_time'])
            log.info("用例设置了等待时间，等待{}秒,请等待。。。".format(str(wait_time)))
            time.sleep(wait_time)

